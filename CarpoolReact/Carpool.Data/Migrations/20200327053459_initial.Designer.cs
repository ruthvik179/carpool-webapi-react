// <auto-generated />
using System;
using Carpool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Carpool.Migrations
{
    [DbContext(typeof(CarpoolContext))]
    [Migration("20200327053459_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarpoolReact.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookingState")
                        .HasColumnType("int");

                    b.Property<string>("RideId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RiderId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RideId1");

                    b.HasIndex("RiderId1");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("CarpoolReact.Models.Car", b =>
                {
                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegistrationNumber");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("CarpoolReact.Models.Driver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarRegistrationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CarRegistrationNumber");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("CarpoolReact.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("CarpoolReact.Models.Ride", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RouteId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("CarpoolReact.Models.RideRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardingPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DropoffPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<string>("RideId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RiderId");

                    b.ToTable("RideRequest");
                });

            modelBuilder.Entity("CarpoolReact.Models.Rider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("CarpoolReact.Models.Route", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("CarpoolReact.Models.Seat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CarRegistrationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RiderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarRegistrationNumber");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("CarpoolReact.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarpoolReact.Models.ViaPoint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("ViaPoint");
                });

            modelBuilder.Entity("CarpoolReact.Models.Booking", b =>
                {
                    b.HasOne("CarpoolReact.Models.Ride", null)
                        .WithMany("Bookings")
                        .HasForeignKey("RideId1");

                    b.HasOne("CarpoolReact.Models.Rider", null)
                        .WithMany("Bookings")
                        .HasForeignKey("RiderId1");
                });

            modelBuilder.Entity("CarpoolReact.Models.Driver", b =>
                {
                    b.HasOne("CarpoolReact.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarRegistrationNumber");

                    b.HasOne("CarpoolReact.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CarpoolReact.Models.Notification", b =>
                {
                    b.HasOne("CarpoolReact.Models.Rider", null)
                        .WithMany("Notifications")
                        .HasForeignKey("RiderId");
                });

            modelBuilder.Entity("CarpoolReact.Models.Ride", b =>
                {
                    b.HasOne("CarpoolReact.Models.Driver", null)
                        .WithMany("Rides")
                        .HasForeignKey("DriverId");

                    b.HasOne("CarpoolReact.Models.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("CarpoolReact.Models.RideRequest", b =>
                {
                    b.HasOne("CarpoolReact.Models.Driver", null)
                        .WithMany("RideRequests")
                        .HasForeignKey("DriverId");

                    b.HasOne("CarpoolReact.Models.Rider", null)
                        .WithMany("RideRequests")
                        .HasForeignKey("RiderId");
                });

            modelBuilder.Entity("CarpoolReact.Models.Rider", b =>
                {
                    b.HasOne("CarpoolReact.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CarpoolReact.Models.Seat", b =>
                {
                    b.HasOne("CarpoolReact.Models.Car", null)
                        .WithMany("Seats")
                        .HasForeignKey("CarRegistrationNumber");
                });

            modelBuilder.Entity("CarpoolReact.Models.ViaPoint", b =>
                {
                    b.HasOne("CarpoolReact.Models.Route", null)
                        .WithMany("ViaPoints")
                        .HasForeignKey("RouteId");
                });
#pragma warning restore 612, 618
        }
    }
}
